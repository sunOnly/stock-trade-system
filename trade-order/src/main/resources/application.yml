server:
  port: 8082 # 订单服务端口，避免与网关或其他服务冲突

spring:
  application:
    name: trade-order # 应用名称
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848 # Nacos Server地址
        namespace: # Nacos命名空间ID，根据实际情况配置
        group: DEFAULT_GROUP # Nacos分组，根据实际情况配置
      config:
        server-addr: ${spring.cloud.nacos.discovery.server-addr} # Nacos配置中心地址
        namespace: ${spring.cloud.nacos.discovery.namespace}
        group: ${spring.cloud.nacos.discovery.group}
        file-extension: yml # 配置文件格式
        shared-configs: # 共享配置
          - data-id: application-common.yml # 通用应用配置
            group: ${spring.cloud.nacos.discovery.group}
            refresh: true
          - data-id: datasource-mysql-config.yml # MySQL数据源配置
            group: ${spring.cloud.nacos.discovery.group}
            refresh: true
        # ext-config: # 可选的扩展配置
        #   - data-id: trade-order-ext.yml
        #     group: ${spring.cloud.nacos.discovery.group}
        #     refresh: true

  # Spring Profiles: 用于区分不同环境的配置 (dev, test, prod)
  profiles:
    active: dev # 默认激活开发环境配置

# MyBatis Plus 配置
mybatis-plus:
  mapper-locations: classpath*:/mapper/**/*.xml # Mapper XML文件位置
  # type-aliases-package: com.trade.order.entity # 实体类别名扫描包 (如果需要)
  global-config:
    db-config:
      id-type: auto # 全局主键策略
      # table-prefix: t_ # 全局表前缀
      # logic-delete-field: deleted # 全局逻辑删除字段名
      # logic-not-delete-value: 0
      # logic-delete-value: 1
  configuration:
    map-underscore-to-camel-case: true # 开启驼峰命名转换
    # log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # MyBatis日志实现

# 日志配置
logging:
  level:
    com.trade.order: INFO # 订单模块日志级别
    com.trade.order.mapper: DEBUG # Mapper接口日志级别 (开发时可设为DEBUG查看SQL)
    org.springframework.web: INFO
    org.springframework.security: INFO # 如果集成了Spring Security
  # file:
  #   name: ./logs/trade-order.log # 日志文件路径和名称

# Actuator端点配置
management:
  endpoints:
    web:
      exposure:
        include: '*' # 暴露所有端点，生产环境请按需配置
  endpoint:
    health:
      show-details: always # 显示健康检查详情

# Feign 配置 (如果需要调用其他服务)
feign:
  client:
    config:
      default:
        connectTimeout: 5000 # 连接超时时间 (ms)
        readTimeout: 5000    # 读取超时时间 (ms)
  # sentinel:
  #   enabled: true # 开启Sentinel对Feign的支持 (如果集成了Sentinel)

# Seata 分布式事务配置 (如果需要)
# seata:
#   tx-service-group: trade_tx_group # 事务分组，需要与Seata Server配置一致
#   service:
#     vgroup-mapping:
#       trade_tx_group: default
#   registry:
#     type: nacos
#     nacos:
#       server-addr: ${spring.cloud.nacos.discovery.server-addr}
#       namespace: ${spring.cloud.nacos.discovery.namespace}
#       group: DEFAULT_GROUP
#       application: seata-server
#   config:
#     type: nacos
#     nacos:
#       server-addr: ${spring.cloud.nacos.discovery.server-addr}
#       namespace: ${spring.cloud.nacos.discovery.namespace}
#       group: SEATA_GROUP
#       data-id: seataServer.properties

# Swagger/OpenAPI 配置 (如果使用SpringDoc)
# springdoc:
#   api-docs:
#     path: /v3/api-docs
#   swagger-ui:
#     path: /swagger-ui.html
#     display-request-duration: true
#     groups-order: DESC
#   group-configs:
#     - group: 'Order API'
#       paths-to-match: '/order/**'
#       packages-to-scan: com.trade.order.controller